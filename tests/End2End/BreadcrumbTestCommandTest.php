<?php

declare(strict_types=1);

namespace End2End;

use Sentry\SentryBundle\Tests\End2End\App\KernelForBufferTest;
use Sentry\SentryBundle\Tests\End2End\StubTransport;
use Symfony\Bundle\FrameworkBundle\Console\Application;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;
use Symfony\Component\Console\Input\ArgvInput;
use Symfony\Component\Console\Output\NullOutput;

/**
 * Tests in this suite test the following configuration:
 * - Sentry breadcrumb handler is enabled
 * - Sentry Monolog handler is enabled which will send log lines with a severity of warn or above to sentry.
 *
 * @runTestsInSeparateProcesses
 */
class BreadcrumbTestCommandTest extends WebTestCase
{
    /**
     * @var Application
     */
    private $application;

    protected static function getKernelClass(): string
    {
        return KernelForBufferTest::class;
    }

    protected function setUp(): void
    {
        StubTransport::$events = [];
        $this->application = new Application(self::bootKernel());
    }

    /**
     * Tests that breadcrumbs are properly captured within a console command and not lost
     * on command termination.
     *
     * @return void
     */
    public function testBreadcrumbWithConsoleListener()
    {
        try {
            // We need to run this by the application directly because the CommandTester doesn't produce proper events.
            $this->application->doRun(new ArgvInput(['bin/console', 'sentry:breadcrumb:test']), new NullOutput());
            $this->fail();
        } catch (\Throwable $e) {
            $this->assertEquals('Breadcrumb error', $e->getMessage());
        }

        $this->assertCount(3, StubTransport::$events);
        // This is the error log line produced by the command
        $event = StubTransport::$events[0];
        $this->assertCount(1, $event->getBreadcrumbs());
        $this->assertEquals('breadcrumb 1 error', $event->getMessage());
        $this->assertEmpty($event->getExceptions());

        // This is the exception thrown by the command
        $event = StubTransport::$events[1];
        $this->assertCount(1, $event->getBreadcrumbs());
        $this->assertEquals('breadcrumb 1 error', $event->getBreadcrumbs()[0]->getMessage());
        $this->assertCount(1, $event->getExceptions());

        // This is the event that is generated by the symfony ErrorListener
        $event = StubTransport::$events[2];
        $this->assertCount(2, $event->getBreadcrumbs());
        $this->assertEquals('breadcrumb 1 error', $event->getBreadcrumbs()[0]->getMessage());
        $this->assertCount(1, $event->getExceptions());
        $this->assertNotNull($event->getMessage());
        $this->assertStringStartsWith('Error thrown while running command', $event->getMessage());
    }

    /**
     * Tests that the scope is reset after the command finished without any errors.
     *
     * @return void
     *
     * @throws \Throwable
     */
    public function testSubCommandBreadcrumbs()
    {
        // We need to run this by the application directly because the CommandTester doesn't produce proper events.
        $this->application->doRun(new ArgvInput(['bin/console', 'sentry:subcommand:test']), new NullOutput());

        // The events collected are
        // - The first breadcrumb in the root command
        // - The first breadcrumb in the subcommand
        // - The second breadcrumb in the root command
        $this->assertCount(3, StubTransport::$events);
        // This is the log line before the subcommand is executed.
        $event = StubTransport::$events[0];
        $this->assertEquals('subcommand 1 error', $event->getMessage());
        $this->assertCount(1, $event->getBreadcrumbs());
        $this->assertEquals('subcommand 1 error', $event->getBreadcrumbs()[0]->getMessage());

        // This is the log line from the dummy command
        $event = StubTransport::$events[1];
        $this->assertEquals('dummy 1 error', $event->getMessage());
        $this->assertCount(2, $event->getBreadcrumbs());
        $this->assertEquals('subcommand 1 error', $event->getBreadcrumbs()[0]->getMessage());
        $this->assertEquals('dummy 1 error', $event->getBreadcrumbs()[1]->getMessage());

        // This is the log line after the subcommand. Since the scope is popped on command termination,
        // it will only have 2 breadcrumbs
        $event = StubTransport::$events[2];
        $this->assertEquals('subcommand 2 error', $event->getMessage());
        $this->assertCount(2, $event->getBreadcrumbs());
        $this->assertEquals('subcommand 1 error', $event->getBreadcrumbs()[0]->getMessage());
        $this->assertEquals('subcommand 2 error', $event->getBreadcrumbs()[1]->getMessage());
    }

    /**
     * Tests that the command that caused the crash is reported as `console.command` tag.
     *
     * @return void
     */
    public function testCrashingSubcommand()
    {
        try {
            $this->application->doRun(new ArgvInput(['bin/console', 'sentry:subcommand:crash']), new NullOutput());
            $this->fail();
        } catch (\Throwable $e) {
            $this->assertEquals('Breadcrumb error', $e->getMessage());
        }

        // The events collected are
        // - The first breadcrumb in the root command
        // - The first breadcrumb in the subcommand
        // - The exception handled in onCommandError in the subcommand
        // - The internal symfony ErrorListener producing a log line in the subcommand
        // - The exception handled in onCommandError in the root command
        // - The internal symfony ErrorListener producing a log line in the root command
        $this->assertCount(6, StubTransport::$events);

        // The first breadcrumb in the root command
        $event = StubTransport::$events[0];
        $this->assertEquals('subcommand crash 1 error', $event->getMessage());
        $this->assertCount(1, $event->getBreadcrumbs());
        $this->assertEquals('subcommand crash 1 error', $event->getBreadcrumbs()[0]->getMessage());
        $this->assertEquals('sentry:subcommand:crash', $event->getTags()['console.command']);

        // The first breadcrumb in the subcommand
        $event = StubTransport::$events[1];
        $this->assertEquals('breadcrumb 1 error', $event->getMessage());
        $this->assertCount(2, $event->getBreadcrumbs());
        $this->assertEquals('subcommand crash 1 error', $event->getBreadcrumbs()[0]->getMessage());
        $this->assertEquals('breadcrumb 1 error', $event->getBreadcrumbs()[1]->getMessage());
        $this->assertEquals('sentry:breadcrumb:test', $event->getTags()['console.command']);

        // The exception handled in onCommandError in the subcommand
        $event = StubTransport::$events[2];
        $this->assertCount(1, $event->getExceptions());
        $this->assertCount(2, $event->getBreadcrumbs());
        $this->assertEquals('subcommand crash 1 error', $event->getBreadcrumbs()[0]->getMessage());
        $this->assertEquals('breadcrumb 1 error', $event->getBreadcrumbs()[1]->getMessage());
        $this->assertEquals('sentry:breadcrumb:test', $event->getTags()['console.command']);

        // The internal symfony ErrorListener producing a log line in the subcommand
        $event = StubTransport::$events[3];
        $this->assertCount(1, $event->getExceptions());
        $this->assertCount(3, $event->getBreadcrumbs());
        $this->assertEquals('subcommand crash 1 error', $event->getBreadcrumbs()[0]->getMessage());
        $this->assertEquals('breadcrumb 1 error', $event->getBreadcrumbs()[1]->getMessage());
        $this->assertEquals('Error thrown while running command "{command}". Message: "{message}"', $event->getBreadcrumbs()[2]->getMessage());
        $this->assertEquals('sentry:breadcrumb:test', $event->getTags()['console.command']);

        // The exception handled in onCommandError in the root command
        $event = StubTransport::$events[4];
        $this->assertCount(1, $event->getExceptions());
        $this->assertCount(1, $event->getBreadcrumbs());
        $this->assertEquals('subcommand crash 1 error', $event->getBreadcrumbs()[0]->getMessage());
        $this->assertEquals('Breadcrumb error', $event->getExceptions()[0]->getValue());
        $this->assertEquals('sentry:subcommand:crash', $event->getTags()['console.command']);

        // The internal symfony ErrorListener producing a log line in the root command
        $event = StubTransport::$events[5];
        $this->assertCount(1, $event->getExceptions());
        $this->assertCount(2, $event->getBreadcrumbs());
        $this->assertEquals('subcommand crash 1 error', $event->getBreadcrumbs()[0]->getMessage());
        $this->assertEquals('Error thrown while running command "{command}". Message: "{message}"', $event->getBreadcrumbs()[1]->getMessage());
        $this->assertEquals('Breadcrumb error', $event->getExceptions()[0]->getValue());
        $this->assertEquals('sentry:subcommand:crash', $event->getTags()['console.command']);
    }

    /**
     * Tests that after a command was executed and finished, no information from that command
     * leaks into other commands that run afterwards.
     *
     * @return void
     *
     * @throws \Throwable
     */
    public function testRunSecondCommandAfterCrashingCommand()
    {
        try {
            // Run first command which crashes but is handled
            $this->application->doRun(new ArgvInput(['bin/console', 'sentry:subcommand:crash']), new NullOutput());
            $this->fail();
        } catch (\Throwable $e) {
            $this->assertEquals('Breadcrumb error', $e->getMessage());
        }

        // We just assert the count here to be sure, the rest is tested in testCrashingSubcommand(..)
        $this->assertCount(6, StubTransport::$events);

        // Run the second command which crashes unhandled.
        $this->application->doRun(new ArgvInput(['bin/console', 'sentry:dummy:test']), new NullOutput());

        // Assert 7 events because one new have been added
        $this->assertCount(7, StubTransport::$events);

        // The new event is just the dummy log line and is not polluted by old breadcrumbs
        $events = StubTransport::$events[6];
        $this->assertCount(1, $events->getBreadcrumbs());
        $this->assertEquals('dummy 1 error', $events->getBreadcrumbs()[0]->getMessage());
        $this->assertEquals('sentry:dummy:test', $events->getTags()['console.command']);
    }

    /**
     * Tests that even if no errors occur, breadcrumb information is available.
     *
     * @return void
     *
     * @throws \Throwable
     */
    public function testBreadcrumbsAreAvailableAfterCommandTermination()
    {
        $this->application->doRun(new ArgvInput(['bin/console', 'sentry:dummy:test']), new NullOutput());

        $this->assertCount(1, StubTransport::$events);
        $event = StubTransport::$events[0];
        $this->assertCount(1, $event->getBreadcrumbs());
        $this->assertEquals('dummy 1 error', $event->getMessage());
        $this->assertEquals('sentry:dummy:test', $event->getTags()['console.command']);
    }
}
