exception:
  path:  /exception
  defaults: { _controller: 'Sentry\SentryBundle\Tests\End2End\App\Controller\MainController::exception' }

fatal:
  path:  /fatal
  defaults: { _controller: 'Sentry\SentryBundle\Tests\End2End\App\Controller\MainController::fatal' }

invalid_csrf:
  path:  /bad-request
  defaults: { _controller: 'Sentry\SentryBundle\Tests\End2End\App\Controller\MainController::badRequest' }

success:
  path:  /200
  defaults: { _controller: 'Sentry\SentryBundle\Tests\End2End\App\Controller\MainController::index' }

secured200:
  path:  /secured/200
  defaults: { _controller: 'Sentry\SentryBundle\Tests\End2End\App\Controller\MainController::index' }

subrequest:
  path:  /subrequest
  defaults: { _controller: 'Sentry\SentryBundle\Tests\End2End\App\Controller\MainController::subrequest' }

notice:
  path:  /notice
  defaults: { _controller: 'Sentry\SentryBundle\Tests\End2End\App\Controller\MainController::notice' }

dispatch:
  path: /dispatch-message
  defaults: { _controller: 'Sentry\SentryBundle\Tests\End2End\App\Controller\MessengerController::dispatchMessage' }

dispatch_unrecoverable:
  path: /dispatch-unrecoverable-message
  defaults: { _controller: 'Sentry\SentryBundle\Tests\End2End\App\Controller\MessengerController::dispatchUnrecoverableMessage' }

tracing_ping_database:
  path: /tracing/ping-database
  defaults: { _controller: 'Sentry\SentryBundle\Tests\End2End\App\Controller\TracingController::pingDatabase' }

tracing_ignored_transaction:
  path: /tracing/ignored-transaction
  defaults: { _controller: 'Sentry\SentryBundle\Tests\End2End\App\Controller\TracingController::ignoredTransaction' }

tracing_cache_populate_string:
  path: /tracing/cache/populate-string
  defaults: { _controller: 'Sentry\SentryBundle\Tests\End2End\App\Controller\TracingCacheController::populateCacheWithString' }

tracing_cache_populate_integer:
  path: /tracing/cache/populate-integer
  defaults: { _controller: 'Sentry\SentryBundle\Tests\End2End\App\Controller\TracingCacheController::populateCacheWithInteger' }

tracing_cache_delete:
  path: /tracing/cache/delete
  defaults: { _controller: 'Sentry\SentryBundle\Tests\End2End\App\Controller\TracingCacheController::deleteCache' }

tracing_cache_populate_string_with_db:
  path: /tracing/cache/populate-string-with-db
  defaults: { _controller: 'Sentry\SentryBundle\Tests\End2End\App\Controller\TracingCacheController::getWithDbTrace' }

psr_tracing_cache_populate_string:
  path: /tracing/cache/psr/populate-string
  defaults: { _controller: 'Sentry\SentryBundle\Tests\End2End\App\Controller\PsrTracingCacheController::testPopulateString' }

psr_tracing_cache_delete:
  path: /tracing/cache/psr/delete
  defaults: { _controller: 'Sentry\SentryBundle\Tests\End2End\App\Controller\PsrTracingCacheController::testDelete' }

just_logging:
  path: /just-logging
  defaults: { _controller: 'Sentry\SentryBundle\Tests\End2End\App\Controller\LoggingController::justLogging' }

logging_With_Error:
  path: /logging-with-error
  defaults: { _controller: 'Sentry\SentryBundle\Tests\End2End\App\Controller\LoggingController::loggingWithError' }

logging_before_send_logs:
  path: /before-send-log
  defaults: { _controller: 'Sentry\SentryBundle\Tests\End2End\App\Controller\LoggingController::beforeSendLog' }

buffer_flush:
  path: /buffer-flush
  defaults: { _controller: 'Sentry\SentryBundle\Tests\End2End\App\Controller\BufferFlushController::testBufferFlush' }
