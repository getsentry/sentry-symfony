<?xml version="1.0" ?>

<container xmlns="http://symfony.com/schema/dic/services"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd">

    <services>
        <service id="Sentry\Options" class="Sentry\Options" public="false" />

        <service id="Sentry\ClientBuilderInterface" class="Sentry\ClientBuilder" public="false">
            <argument type="service" id="Sentry\Options" />
        </service>

        <service id="Sentry\ClientInterface" class="Sentry\Client" public="false">
            <factory service="Sentry\ClientBuilderInterface" method="getClient" />
        </service>

        <service id="Sentry\State\HubInterface" public="false">
            <factory class="Sentry\State\HubAdapter" method="getInstance" />
            <call method="bindClient">
                <argument type="service" id="Sentry\ClientInterface" />
            </call>
        </service>

        <service id="Sentry\SentryBundle\EventListener\ConsoleCommandListener" class="Sentry\SentryBundle\EventListener\ConsoleCommandListener" public="false">
            <argument type="service" id="Sentry\State\HubInterface" />

            <tag name="kernel.event_listener" event="console.command" method="handleConsoleCommandEvent" priority="%sentry.listener_priorities.console%" />
            <tag name="kernel.event_listener" event="console.terminate" method="handleConsoleTerminateEvent" priority="%sentry.listener_priorities.console_terminate%" />
            <tag name="kernel.event_listener" event="console.error" method="handleConsoleErrorEvent" priority="%sentry.listener_priorities.console_error%" />
        </service>

        <service id="Sentry\SentryBundle\EventListener\ErrorListener" class="Sentry\SentryBundle\EventListener\ErrorListener" public="false">
            <argument type="service" id="Sentry\State\HubInterface" />

            <tag name="kernel.event_listener" event="kernel.exception" method="handleExceptionEvent" priority="%sentry.listener_priorities.request_error%" />
        </service>

        <service id="Sentry\SentryBundle\EventListener\RequestListener" class="Sentry\SentryBundle\EventListener\RequestListener" public="false">
            <argument type="service" id="Sentry\State\HubInterface" />
            <argument type="service" id="security.token_storage" on-invalid="ignore" />

            <tag name="kernel.event_listener" event="kernel.request" method="handleKernelRequestEvent" priority="%sentry.listener_priorities.request%" />
            <tag name="kernel.event_listener" event="kernel.controller" method="handleKernelControllerEvent" priority="%sentry.listener_priorities.request%" />
        </service>

        <service id="Sentry\SentryBundle\EventListener\SubRequestListener" class="Sentry\SentryBundle\EventListener\SubRequestListener" public="false">
            <argument type="service" id="Sentry\State\HubInterface" />

            <tag name="kernel.event_listener" event="kernel.request" method="handleKernelRequestEvent" priority="%sentry.listener_priorities.sub_request%" />
            <tag name="kernel.event_listener" event="kernel.finish_request" method="handleKernelFinishRequestEvent" priority="%sentry.listener_priorities.sub_request%" />
        </service>

        <service id="Sentry\SentryBundle\EventListener\MessengerListener" class="Sentry\SentryBundle\EventListener\MessengerListener" public="false">
            <argument type="service" id="Sentry\State\HubInterface" />

            <tag name="kernel.event_listener" event="Symfony\Component\Messenger\Event\WorkerMessageFailedEvent" method="handleWorkerMessageFailedEvent" priority="%sentry.listener_priorities.worker_error%" />
            <tag name="kernel.event_listener" event="Symfony\Component\Messenger\Event\WorkerMessageHandledEvent" method="handleWorkerMessageHandledEvent" priority="%sentry.listener_priorities.worker_error%" />
        </service>

        <service id="Sentry\SentryBundle\Command\SentryTestCommand" class="Sentry\SentryBundle\Command\SentryTestCommand" public="false">
            <tag name="console.command" />
        </service>

        <service id="Sentry\Monolog\Handler" class="Sentry\Monolog\Handler" public="false">
            <argument type="service" id="Sentry\State\HubInterface" />
            <argument key="$level" />
            <argument key="$bubble" />
        </service>
    </services>
</container>
